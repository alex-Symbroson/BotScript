/////////////
//botscript//
/////////////

keywords: import, loop, while, label, not, and, or, return, var, break, continue
symbs: , ; [ ] > < = == != <= >= + - * / % += -= ++ -- ** ? : " '

Datatypes
//simple datatypes:
	Bool    =
		reverse()
	Int     + - * / % += -= *= /= %= ++ -- **
		string->Str
		isInt()->Bool
	Float   //equal Int
		...
	String  + * += *=
		find(Str)->int
		insert(Str)
		replace(Str,Str)->Str
		split(Str)->Lst
//complex datatypes:
	List    + +=     //first item has index 1
		find(var)->Int
		insert(var)
		pop(Int=List.length-1)->var
		push(var)
	Object  + +=
		keys->Lst
		pop(key)->var
		values->Lst
	Function
		arguments->Lst
		content->Str
		jump(simple_type) //jumps to label in function
	Pin
		operator=(Int) // set Pin
		setInput()
		Read()->Int
		setOutput()
		Write(Int)
		Stop()
		...
	Thread

Namespaces
	Math
		...
	Thread
		create(function, var) -> Int
		join(Int)->var
		cancel(Int)


Builtins
	print(var)
	input(var)->var
	delay(Int)
	clock()->Int

//comment
/*
comment
*/

print(value) //output
input(message) //input (as string)

import "a" //import file

var a = 8 //declare new variable
var foo = {print("hi")} //declare function
var foo = (arg1, ...){/*function*/} //function parameters

//use 'return' or 'return v' to jump out of a function

//priority block
//was executed first and returns its last value
(5<8) -> true
(a=5,a) -> a

main = {/*function*/} //called (if existant) when global part loaded and not called before)

a,b //comma -> a and b will be done
a;b //semikolon equal next line (not required)

//if implementation
(cond)?{/*true*/}:{cond}?(/*true*/):{/*false*/}
a = (cond)?{/*true*/}:{/*false*/}

//loops
loop {/*function*/}

[String:value, ...] //object
[value, ...] //list -> special object
list[index]

//case implementation
Int a = 2
{
	label 1:{}
	label 2:{}
	label 3:{}
}.jump(a) //jump to b, other ignored
//just simple datatypes are accepted as label
